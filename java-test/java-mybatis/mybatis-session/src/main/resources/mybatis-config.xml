<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 详见：http://www.mybatis.org/mybatis-3/zh/configuration.html -->
	<properties resource="config.properties">
	</properties>
	
	<!-- settings设置 -->
	<settings>
		<!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 -->
	 <setting name="cacheEnabled" value="true"/>
	<!--    延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。
	 -->  <setting name="lazyLoadingEnabled" value="true"/>
	<!--   是否允许单一语句返回多结果集（需要兼容驱动）。 -->
	  <setting name="multipleResultSetsEnabled" value="true"/>
	<!--   使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 
	 -->  <setting name="useColumnLabel" value="true"/>
	<!--   允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。
	 -->  <setting name="useGeneratedKeys" value="false"/>
	 <!--  	指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。
	 -->  <setting name="autoMappingBehavior" value="PARTIAL"/>
	<!--   指定发现自动映射目标未知列（或者未知属性类型）的行为。
			NONE: 不做任何反应
			WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
			FAILING: 映射失败 (抛出 SqlSessionException)
	 -->  <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
	<!--   配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。
	 -->  <setting name="defaultExecutorType" value="SIMPLE"/>
	<!--   设置超时时间，它决定驱动等待数据库响应的秒数。
	 -->  <setting name="defaultStatementTimeout" value="25"/>
	<!--   为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。
	 -->  <setting name="defaultFetchSize" value="100"/>
	 <!--  允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。
	 -->  <setting name="safeRowBoundsEnabled" value="false"/>
	<!--   是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。
	 -->  <setting name="mapUnderscoreToCamelCase" value="false"/>
	<!--   MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。
	 -->  <setting name="localCacheScope" value="SESSION"/>
	 <!--  当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。
	 -->  <setting name="jdbcTypeForNull" value="OTHER"/>
	<!--   指定哪个对象的方法触发一次延迟加载。
	 -->  <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
	</settings>
	
	<!-- 类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。 -->
	<typeAliases>
		 <!-- 当这样配置时，Blog可以用在任何使用domain.blog.Blog的地方。 -->
		 <!-- <typeAlias alias="Blog" type="domain.blog.Blog"/>  -->
		 	
		<!-- 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 
			每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
			 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。
		-->
		<!-- <package name=""/> --> 
	</typeAliases>
	
	<!-- typeHandlers:无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。 -->
	<typeHandlers>
		<!-- 注意在使用自动检索（autodiscovery）功能的时候，只能通过注解方式来指定 JDBC 的类型。 -->
		<!-- <package name="org.mybatis.example"/> -->
		
		<!-- 你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。
		 具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 
		 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler，
		  然后可以选择性地将它映射到一个 JDBC 类型。 -->
 		<!-- <typeHandler handler="org.mybatis.example.ExampleTypeHandler" jdbcType="VARCHAR"/> -->
	</typeHandlers>
	
	<!-- MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。
	 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。
	  如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。 -->
	 <!-- ObjectFactory 接口很简单，它包含两个创建用的方法，一个是处理默认构造方法的，
	  另外一个是处理带参数的构造方法的。 最后，setProperties 方法可以被用来配置 ObjectFactory，
	  在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。 -->
	<!-- <objectFactory type="org.mybatis.example.ExampleObjectFactory">
		 <property name="someProperty" value="100"/>
	</objectFactory> -->
	
	
	<!-- MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：
		Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
		ParameterHandler (getParameterObject, setParameters)
		ResultSetHandler (handleResultSets, handleOutputParameters)
		StatementHandler (prepare, parameterize, batch, update, query)
		这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。
		
		通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。 -->
<!-- 	<plugins>
		<plugin interceptor="org.mybatis.example.ExamplePlugin">
    		<property name="someProperty" value="100"/>
  		</plugin>
	</plugins> -->
	
	
	<!-- 配置环境 -->
	 <environments default="development">
	   <environment id="development">
	   	 <!-- 事务管理器（transactionManager）
	   	 在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：
		
		JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
		MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，
		而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
		 默认情况下它会关闭连接，然而一些容器并不希望这样，
		 因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。
	   	  -->
	   	  <!-- <transactionManager type="MANAGED">
			  <property name="closeConnection" value="false"/>
			</transactionManager> -->
	   	  
	     <transactionManager type="JDBC"/>
	     
	     
	     <!-- 数据源（dataSource）
	     dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
		许多 MyBatis 的应用程序会按示例中的例子来配置数据源。虽然这是可选的，但为了使用延迟加载，数据源是必须配置的。
		有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：
		
		UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：
		
		driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。
		url – 这是数据库的 JDBC URL 地址。
		username – 登录数据库的用户名。
		password – 登录数据库的密码。
		defaultTransactionIsolationLevel – 默认的连接事务隔离级别。
		作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为“driver.”，例如：
		
		driver.encoding=UTF8
		这将通过 DriverManager.getConnection(url,driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。
		
		POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。
		
		除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：
		
		poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10
		poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。
		poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）
		poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。
		poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程. 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3 (新增于 3.4.5)
		poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
		poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。
		poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。
		JNDI – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：
		
		initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么 data_source 属性将会直接从 InitialContext 中寻找。
		data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。
		和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：
		
		env.encoding=UTF8
		这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。
	      -->
	     <dataSource type="POOLED">
	        <property name="driver" value="${driver}"/>
			<property name="url" value="${url}"/>
			<property name="username" value="${username}"/>
			<property name="password" value="${password}"/>
	     </dataSource>
	   </environment>
	 </environments>
	 
	 
	 <!-- MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
	 	 MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。 
	 	如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
	 	 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可 -->
	<!--  <databaseIdProvider type="DB_VENDOR">
	  <property name="SQL Server" value="sqlserver"/>
	  <property name="DB2" value="db2"/>        
	  <property name="Oracle" value="oracle" />
	</databaseIdProvider> -->
	 
	 <!-- 映射器（mappers）
	 既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。
	 但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。 
	 Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。
	 你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等。
	  -->
	 <mappers>
	   <mapper resource="com/test/mapping/UserMapper.xml"/>
	 </mappers>
</configuration>